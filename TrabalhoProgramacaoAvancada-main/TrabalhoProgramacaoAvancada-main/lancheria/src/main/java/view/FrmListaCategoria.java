/*
 * Tela de listagem, alteração, exclusão, cadastro de categorias
 */
package view;

import dal.DAO;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Categoria;

/**
 *
 * @author maria
 */
public class FrmListaCategoria extends javax.swing.JFrame {

    /**
     * Creates new form FListaDeLivros
     */
    public FrmListaCategoria() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btn_fechar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_categoria = new javax.swing.JTable();
        btn_alterar = new javax.swing.JButton();
        btn_remover = new javax.swing.JButton();
        btn_adicionar = new javax.swing.JButton();
        btn_sair = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Título", "Autor", "Categoria", "Data Lcto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
        }

        btn_fechar.setText("Fechar");
        btn_fechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_fecharActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biblioteca");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Categorias"));

        tb_categoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categorias"
            }
        ));
        jScrollPane1.setViewportView(tb_categoria);

        btn_alterar.setText("Alterar");
        btn_alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_alterarActionPerformed(evt);
            }
        });

        btn_remover.setText("Remover");
        btn_remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removerActionPerformed(evt);
            }
        });

        btn_adicionar.setText("Adicionar");
        btn_adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_adicionarActionPerformed(evt);
            }
        });

        btn_sair.setText("Sair");
        btn_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_sair, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remover, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_adicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_alterar, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_adicionar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_alterar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_remover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_sair)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Funcionalidade do botão Alterar, ao selecionar uma categoria das listadas
     * e informar uma novo nome de categoria é realizado a alteração no banco
     *
     * @param evt
     */
    private void btn_alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_alterarActionPerformed
        if (tb_categoria.getSelectedRow() != -1) {

            try {
                //Usuário informa uma nova categoria para alteração da já existente (selecionada em tela)
                String catAtualizada = JOptionPane.showInputDialog(this, "Informe o nome da categoria", tb_categoria.getValueAt(tb_categoria.getSelectedRow(), 0).toString());

                //instancia as classes categoria e CategoriaDAO
                DAO<Categoria> daoc = new DAO<>(Categoria.class);

                List<Categoria> lstCat = daoc.consultar("descricao = '" + tb_categoria.getValueAt(tb_categoria.getSelectedRow(), 0).toString() + "'");

                //localiza a categoria selecionada em tela
                for (int i = 0; i < lstCat.size(); i++) {
                    Categoria c = new Categoria();

                    c.setId(lstCat.get(i).getId());
                    c.setDescricao(catAtualizada);

                    daoc.salvar(c);

                    JOptionPane.showMessageDialog(this, "Categoria alterada com sucesso", null, JOptionPane.INFORMATION_MESSAGE, null);
                    try {
                        preencheTabela();
                    } catch (IOException ex) {
                        Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            //caso o usuário clicar no botão alterar sem selecionar nenhum item na tabela
            JOptionPane.showMessageDialog(this, "Selecione uma categoria para alterar", null, JOptionPane.WARNING_MESSAGE, null);

        }
    }//GEN-LAST:event_btn_alterarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            //ao abrir a tela atualiza tabela de categorias
            preencheTabela();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void btn_fecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_fecharActionPerformed
//       this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);


    }//GEN-LAST:event_btn_fecharActionPerformed

    /**
     * Funcionalidade do botão Remover que ao selecionar uma categoria a mesma é
     * removida do banco
     *
     * @param evt
     */
    private void btn_removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removerActionPerformed
        //valida se possui um item selecionado na tabela
        if (tb_categoria.getSelectedRow() != -1) {
            try {
                //instancia classes categoria e CategoriaDAO
                DAO<Categoria> daoc = new DAO<>(Categoria.class);

                List<Categoria> lstCat = null;

                lstCat = daoc.consultar("descricao = '" + tb_categoria.getValueAt(tb_categoria.getSelectedRow(), 0).toString() + "'");

                for (int i = 0; i < lstCat.size(); i++) {
                    //chama o método deletar informando o objeto com a categoria selecionada
                    boolean removido = false;

                    removido = daoc.excluir(lstCat.get(i).getId());

                    //se removido é true notifica o usuário e atualiza a tabela em tela
                    if (removido) {
                        JOptionPane.showMessageDialog(this, "Categoria removida com sucesso", null, JOptionPane.INFORMATION_MESSAGE, null);

                        try {
                            preencheTabela();
                        } catch (IOException ex) {
                            Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }

                }
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma categoria para remover", null, JOptionPane.WARNING_MESSAGE, null);

        }

    }//GEN-LAST:event_btn_removerActionPerformed

    /**
     * Funcionalidade do botão Adicionar, é solicitado o nome da categoria e
     * assim a insere no banco de dados
     *
     * @param evt
     */
    private void btn_adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_adicionarActionPerformed

        try {
            //nome da categoria informada pelo usuário por um caixa de diálogo
            String catNova = JOptionPane.showInputDialog(this, "Informe o nome da categoria");

            //instancia classe CategoriaDAO
            DAO<Categoria> daoc = new DAO<>(Categoria.class);

            Categoria c = new Categoria();
            c.setDescricao(catNova);
            //armazena o retorno do método cadastrar, o qual insere a categoria informada no banco
            boolean salvo = daoc.salvar(c);
            //valida se salvo = true e assim notifica o usuário e atualiza tabela em tela
            if (salvo) {
                try {
                    JOptionPane.showMessageDialog(this, "Categoria cadastrada com sucesso", null, JOptionPane.INFORMATION_MESSAGE, null);
                    preencheTabela();
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btn_adicionarActionPerformed
    /**
     * Funcionalidade do botão Sair, encerra o processo.
     *
     * @param evt
     */
    private void btn_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btn_sairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListaCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListaCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListaCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListaCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrmListaCategoria().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_adicionar;
    private javax.swing.JButton btn_alterar;
    private javax.swing.JButton btn_fechar;
    private javax.swing.JButton btn_remover;
    private javax.swing.JButton btn_sair;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable tb_categoria;
    // End of variables declaration//GEN-END:variables

    /**
     * Atualiza tabela que lista categorias
     *
     * @throws IOException
     * @throws FileNotFoundException
     * @throws ClassNotFoundException
     */
    public void preencheTabela() throws IOException, FileNotFoundException, ClassNotFoundException {

        try {
            DefaultTableModel modelo = (DefaultTableModel) tb_categoria.getModel();

            modelo.setNumRows(0);

            DAO<Categoria> daoc = new DAO<>(Categoria.class);
                
                
            for (Categoria c : daoc.consultar()) {

                modelo.addRow(new Object[]{
                    c.getDescricao()
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmListaCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
